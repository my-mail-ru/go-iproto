// Code generated by iprotogen. DO NOT EDIT.

package iprototest

import (
	"encoding/binary"
	"fmt"
	"math"

	iproto "github.com/my-mail-ru/go-iproto"
	innerpkg "github.com/my-mail-ru/go-iproto/tests/innerpkg"
	iprototypes "github.com/my-mail-ru/go-iproto/types"
)

func (recvMyInt MyInt) MarshalIProto(buf []byte) ([]byte, error) {
	buf = iproto.EncodeBER(buf, uint64(recvMyInt))
	return buf, nil
}
func (recv_MyInt *MyInt) UnmarshalIProto(buf []byte) ([]byte, error) {
	var (
		u64 uint64
		err error
	)
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	*recv_MyInt = MyInt(u64)
	return buf, nil
}
func (recvMyStruct MyStruct) MarshalIProto(buf []byte) ([]byte, error) {
	buf = iproto.EncodeBER(buf, uint64(recvMyStruct.Embedded.EmbeddedInt))
	buf = append(buf, byte(len(recvMyStruct.Embedded.EmbeddedString)), byte(len(recvMyStruct.Embedded.EmbeddedString)>>8), byte(len(recvMyStruct.Embedded.EmbeddedString)>>16), byte(len(recvMyStruct.Embedded.EmbeddedString)>>24))
	buf = append(buf, recvMyStruct.Embedded.EmbeddedString...)
	buf = iproto.EncodeBER(buf, uint64(recvMyStruct.Ints.IntField))
	buf = iproto.EncodeBER(buf, uint64(recvMyStruct.Ints.InnerInt))
	buf = append(buf, byte(recvMyStruct.Ints.Int8))
	buf = append(buf, byte(recvMyStruct.Ints.DefInt8))
	buf = append(buf, recvMyStruct.Ints.Uint8)
	buf = append(buf, byte(recvMyStruct.Ints.Uint16), byte(recvMyStruct.Ints.Uint16>>8))
	buf = append(buf, byte(recvMyStruct.Ints.Uint32), byte(recvMyStruct.Ints.Uint32>>8), byte(recvMyStruct.Ints.Uint32>>16), byte(recvMyStruct.Ints.Uint32>>24))
	buf = append(buf, byte(recvMyStruct.Ints.Uint64), byte(recvMyStruct.Ints.Uint64>>8), byte(recvMyStruct.Ints.Uint64>>16), byte(recvMyStruct.Ints.Uint64>>24), byte(recvMyStruct.Ints.Uint64>>32), byte(recvMyStruct.Ints.Uint64>>40), byte(recvMyStruct.Ints.Uint64>>48), byte(recvMyStruct.Ints.Uint64>>56))
	buf = append(buf, byte(recvMyStruct.Ints.DefUint8))
	buf = append(buf, byte(recvMyStruct.Ints.DefUint16), byte(recvMyStruct.Ints.DefUint16>>8))
	buf = append(buf, byte(recvMyStruct.Ints.DefUint32), byte(recvMyStruct.Ints.DefUint32>>8), byte(recvMyStruct.Ints.DefUint32>>16), byte(recvMyStruct.Ints.DefUint32>>24))
	buf = append(buf, byte(recvMyStruct.Ints.DefUint64), byte(recvMyStruct.Ints.DefUint64>>8), byte(recvMyStruct.Ints.DefUint64>>16), byte(recvMyStruct.Ints.DefUint64>>24), byte(recvMyStruct.Ints.DefUint64>>32), byte(recvMyStruct.Ints.DefUint64>>40), byte(recvMyStruct.Ints.DefUint64>>48), byte(recvMyStruct.Ints.DefUint64>>56))
	if recvMyStruct.Ints.Clipped > 65535 {
		return nil, fmt.Errorf("MarshalIProto: RecvMyStruct.Ints.Clipped: %w: %d > %d", iproto.ErrOverflow, recvMyStruct.Ints.Clipped, 65535)
	}
	buf = append(buf, byte(recvMyStruct.Ints.Clipped), byte(recvMyStruct.Ints.Clipped>>8))
	buf = iproto.EncodeBER(buf, uint64(len(recvMyStruct.String)))
	buf = append(buf, recvMyStruct.String...)
	if len(recvMyStruct.DefString) > 255 {
		return nil, fmt.Errorf("MarshalIProto: Len(recvMyStruct.DefString): %w: %d > %d", iproto.ErrOverflow, len(recvMyStruct.DefString), 255)
	}
	buf = append(buf, byte(len(recvMyStruct.DefString)))
	buf = append(buf, recvMyStruct.DefString...)
	buf = append(buf, byte(len(recvMyStruct.DflString)), byte(len(recvMyStruct.DflString)>>8), byte(len(recvMyStruct.DflString)>>16), byte(len(recvMyStruct.DflString)>>24))
	buf = append(buf, recvMyStruct.DflString...)
	if len(recvMyStruct.SignedLenString) < -128 {
		return nil, fmt.Errorf("MarshalIProto: Len(recvMyStruct.SignedLenString): %w: %d < %d", iproto.ErrOverflow, len(recvMyStruct.SignedLenString), -128)
	}
	if len(recvMyStruct.SignedLenString) > 127 {
		return nil, fmt.Errorf("MarshalIProto: Len(recvMyStruct.SignedLenString): %w: %d > %d", iproto.ErrOverflow, len(recvMyStruct.SignedLenString), 127)
	}
	buf = append(buf, byte(len(recvMyStruct.SignedLenString)))
	buf = append(buf, recvMyStruct.SignedLenString...)
	if len(recvMyStruct.StrSlice) > 65535 {
		return nil, fmt.Errorf("MarshalIProto: Len(recvMyStruct.StrSlice): %w: %d > %d", iproto.ErrOverflow, len(recvMyStruct.StrSlice), 65535)
	}
	buf = append(buf, byte(len(recvMyStruct.StrSlice)), byte(len(recvMyStruct.StrSlice)>>8))
	for _, elemRecvMyStruct_StrSlice := range recvMyStruct.StrSlice {
		buf = append(buf, byte(len(elemRecvMyStruct_StrSlice)), byte(len(elemRecvMyStruct_StrSlice)>>8), byte(len(elemRecvMyStruct_StrSlice)>>16), byte(len(elemRecvMyStruct_StrSlice)>>24))
		buf = append(buf, elemRecvMyStruct_StrSlice...)
	}
	buf = append(buf, byte(recvMyStruct.Timestamp), byte(recvMyStruct.Timestamp>>8), byte(recvMyStruct.Timestamp>>16), byte(recvMyStruct.Timestamp>>24), byte(recvMyStruct.Timestamp>>32), byte(recvMyStruct.Timestamp>>40), byte(recvMyStruct.Timestamp>>48), byte(recvMyStruct.Timestamp>>56))
	bitsRecvMyStruct_Float := math.Float32bits(recvMyStruct.Float)
	buf = append(buf, byte(bitsRecvMyStruct_Float), byte(bitsRecvMyStruct_Float>>8), byte(bitsRecvMyStruct_Float>>16), byte(bitsRecvMyStruct_Float>>24))
	bitsRecvMyStruct_DefFloat := math.Float32bits(float32(recvMyStruct.DefFloat))
	buf = append(buf, byte(bitsRecvMyStruct_DefFloat), byte(bitsRecvMyStruct_DefFloat>>8), byte(bitsRecvMyStruct_DefFloat>>16), byte(bitsRecvMyStruct_DefFloat>>24))
	bitsRecvMyStruct_Double := math.Float64bits(recvMyStruct.Double)
	buf = append(buf, byte(bitsRecvMyStruct_Double), byte(bitsRecvMyStruct_Double>>8), byte(bitsRecvMyStruct_Double>>16), byte(bitsRecvMyStruct_Double>>24), byte(bitsRecvMyStruct_Double>>32), byte(bitsRecvMyStruct_Double>>40), byte(bitsRecvMyStruct_Double>>48), byte(bitsRecvMyStruct_Double>>56))
	bitsRecvMyStruct_DefDouble := math.Float64bits(float64(recvMyStruct.DefDouble))
	buf = append(buf, byte(bitsRecvMyStruct_DefDouble), byte(bitsRecvMyStruct_DefDouble>>8), byte(bitsRecvMyStruct_DefDouble>>16), byte(bitsRecvMyStruct_DefDouble>>24), byte(bitsRecvMyStruct_DefDouble>>32), byte(bitsRecvMyStruct_DefDouble>>40), byte(bitsRecvMyStruct_DefDouble>>48), byte(bitsRecvMyStruct_DefDouble>>56))
	buf = iproto.EncodeBER(buf, uint64(len(recvMyStruct.NestedSlice)))
	for _, elemRecvMyStruct_NestedSlice := range recvMyStruct.NestedSlice {
		if len(elemRecvMyStruct_NestedSlice) > 65535 {
			return nil, fmt.Errorf("MarshalIProto: Len(elemRecvMyStruct_NestedSlice): %w: %d > %d", iproto.ErrOverflow, len(elemRecvMyStruct_NestedSlice), 65535)
		}
		buf = append(buf, byte(len(elemRecvMyStruct_NestedSlice)), byte(len(elemRecvMyStruct_NestedSlice)>>8))
		for _, elemElemRecvMyStruct_NestedSlice := range elemRecvMyStruct_NestedSlice {
			if len(elemElemRecvMyStruct_NestedSlice) > 255 {
				return nil, fmt.Errorf("MarshalIProto: Len(elemElemRecvMyStruct_NestedSlice): %w: %d > %d", iproto.ErrOverflow, len(elemElemRecvMyStruct_NestedSlice), 255)
			}
			buf = append(buf, byte(len(elemElemRecvMyStruct_NestedSlice)))
			buf = append(buf, elemElemRecvMyStruct_NestedSlice...)
		}
	}
	buf = iproto.EncodeBER(buf, uint64(len(recvMyStruct.Bytes)))
	buf = append(buf, recvMyStruct.Bytes...)
	buf = iproto.EncodeBER(buf, uint64(len(recvMyStruct.DefBytes)))
	buf = append(buf, recvMyStruct.DefBytes...)
	buf = iproto.EncodeBER(buf, recvMyStruct.BER)
	buf = iproto.EncodeBER(buf, uint64(recvMyStruct.DefBER))
	if recvMyStruct.PlainBoolT {
		buf = append(buf, 1)
	} else {
		buf = append(buf, 0)
	}
	if recvMyStruct.PlainBoolF {
		buf = append(buf, 1)
	} else {
		buf = append(buf, 0)
	}
	if recvMyStruct.CustomBoolT {
		buf = append(buf, 49)
	} else {
		buf = append(buf, 48)
	}
	if recvMyStruct.CustomBoolF {
		buf = append(buf, 49)
	} else {
		buf = append(buf, 48)
	}
	if recvMyStruct.CustomCharBoolT {
		buf = append(buf, 116)
	} else {
		buf = append(buf, 102)
	}
	if recvMyStruct.CustomCharBoolF {
		buf = append(buf, 116)
	} else {
		buf = append(buf, 102)
	}
	for _, elemRecvMyStruct_IntArray := range recvMyStruct.IntArray {
		if elemRecvMyStruct_IntArray < -2147483648 {
			return nil, fmt.Errorf("MarshalIProto: ElemRecvMyStruct_IntArray: %w: %d < %d", iproto.ErrOverflow, elemRecvMyStruct_IntArray, -2147483648)
		}
		if elemRecvMyStruct_IntArray > 2147483647 {
			return nil, fmt.Errorf("MarshalIProto: ElemRecvMyStruct_IntArray: %w: %d > %d", iproto.ErrOverflow, elemRecvMyStruct_IntArray, 2147483647)
		}
		buf = append(buf, byte(elemRecvMyStruct_IntArray), byte(elemRecvMyStruct_IntArray>>8), byte(elemRecvMyStruct_IntArray>>16), byte(elemRecvMyStruct_IntArray>>24))
	}
	buf = append(buf, recvMyStruct.UUID[:]...)
	buf = append(buf, byte(len(recvMyStruct.MapStringString)), byte(len(recvMyStruct.MapStringString)>>8), byte(len(recvMyStruct.MapStringString)>>16), byte(len(recvMyStruct.MapStringString)>>24))
	for keyRecvMyStruct_MapStringString, valRecvMyStruct_MapStringString := range recvMyStruct.MapStringString {
		buf = append(buf, byte(len(keyRecvMyStruct_MapStringString)), byte(len(keyRecvMyStruct_MapStringString)>>8), byte(len(keyRecvMyStruct_MapStringString)>>16), byte(len(keyRecvMyStruct_MapStringString)>>24))
		buf = append(buf, keyRecvMyStruct_MapStringString...)
		buf = append(buf, byte(len(valRecvMyStruct_MapStringString)), byte(len(valRecvMyStruct_MapStringString)>>8), byte(len(valRecvMyStruct_MapStringString)>>16), byte(len(valRecvMyStruct_MapStringString)>>24))
		buf = append(buf, valRecvMyStruct_MapStringString...)
	}
	buf = iproto.EncodeBER(buf, uint64(len(recvMyStruct.MapStringStringTagged)))
	for keyRecvMyStruct_MapStringStringTagged, valRecvMyStruct_MapStringStringTagged := range recvMyStruct.MapStringStringTagged {
		if len(keyRecvMyStruct_MapStringStringTagged) > 255 {
			return nil, fmt.Errorf("MarshalIProto: Len(keyRecvMyStruct_MapStringStringTagged): %w: %d > %d", iproto.ErrOverflow, len(keyRecvMyStruct_MapStringStringTagged), 255)
		}
		buf = append(buf, byte(len(keyRecvMyStruct_MapStringStringTagged)))
		buf = append(buf, keyRecvMyStruct_MapStringStringTagged...)
		if len(valRecvMyStruct_MapStringStringTagged) > 65535 {
			return nil, fmt.Errorf("MarshalIProto: Len(valRecvMyStruct_MapStringStringTagged): %w: %d > %d", iproto.ErrOverflow, len(valRecvMyStruct_MapStringStringTagged), 65535)
		}
		buf = append(buf, byte(len(valRecvMyStruct_MapStringStringTagged)), byte(len(valRecvMyStruct_MapStringStringTagged)>>8))
		buf = append(buf, valRecvMyStruct_MapStringStringTagged...)
	}
	buf = iproto.EncodeBER(buf, uint64(len(recvMyStruct.Set)))
	for keyRecvMyStruct_Set := range recvMyStruct.Set {
		buf = iproto.EncodeBER(buf, uint64(len(keyRecvMyStruct_Set)))
		buf = append(buf, keyRecvMyStruct_Set...)
	}
	buf = iproto.EncodeBER(buf, uint64(len(recvMyStruct.MapIntInts)))
	for keyRecvMyStruct_MapIntInts, valRecvMyStruct_MapIntInts := range recvMyStruct.MapIntInts {
		if keyRecvMyStruct_MapIntInts < -2147483648 {
			return nil, fmt.Errorf("MarshalIProto: KeyRecvMyStruct_MapIntInts: %w: %d < %d", iproto.ErrOverflow, keyRecvMyStruct_MapIntInts, -2147483648)
		}
		if keyRecvMyStruct_MapIntInts > 2147483647 {
			return nil, fmt.Errorf("MarshalIProto: KeyRecvMyStruct_MapIntInts: %w: %d > %d", iproto.ErrOverflow, keyRecvMyStruct_MapIntInts, 2147483647)
		}
		buf = append(buf, byte(keyRecvMyStruct_MapIntInts), byte(keyRecvMyStruct_MapIntInts>>8), byte(keyRecvMyStruct_MapIntInts>>16), byte(keyRecvMyStruct_MapIntInts>>24))
		if len(valRecvMyStruct_MapIntInts) > 255 {
			return nil, fmt.Errorf("MarshalIProto: Len(valRecvMyStruct_MapIntInts): %w: %d > %d", iproto.ErrOverflow, len(valRecvMyStruct_MapIntInts), 255)
		}
		buf = append(buf, byte(len(valRecvMyStruct_MapIntInts)))
		for _, elemValRecvMyStruct_MapIntInts := range valRecvMyStruct_MapIntInts {
			buf = iproto.EncodeBER(buf, uint64(elemValRecvMyStruct_MapIntInts.IntField))
			buf = iproto.EncodeBER(buf, uint64(elemValRecvMyStruct_MapIntInts.InnerInt))
			buf = append(buf, byte(elemValRecvMyStruct_MapIntInts.Int8))
			buf = append(buf, byte(elemValRecvMyStruct_MapIntInts.DefInt8))
			buf = append(buf, elemValRecvMyStruct_MapIntInts.Uint8)
			buf = append(buf, byte(elemValRecvMyStruct_MapIntInts.Uint16), byte(elemValRecvMyStruct_MapIntInts.Uint16>>8))
			buf = append(buf, byte(elemValRecvMyStruct_MapIntInts.Uint32), byte(elemValRecvMyStruct_MapIntInts.Uint32>>8), byte(elemValRecvMyStruct_MapIntInts.Uint32>>16), byte(elemValRecvMyStruct_MapIntInts.Uint32>>24))
			buf = append(buf, byte(elemValRecvMyStruct_MapIntInts.Uint64), byte(elemValRecvMyStruct_MapIntInts.Uint64>>8), byte(elemValRecvMyStruct_MapIntInts.Uint64>>16), byte(elemValRecvMyStruct_MapIntInts.Uint64>>24), byte(elemValRecvMyStruct_MapIntInts.Uint64>>32), byte(elemValRecvMyStruct_MapIntInts.Uint64>>40), byte(elemValRecvMyStruct_MapIntInts.Uint64>>48), byte(elemValRecvMyStruct_MapIntInts.Uint64>>56))
			buf = append(buf, byte(elemValRecvMyStruct_MapIntInts.DefUint8))
			buf = append(buf, byte(elemValRecvMyStruct_MapIntInts.DefUint16), byte(elemValRecvMyStruct_MapIntInts.DefUint16>>8))
			buf = append(buf, byte(elemValRecvMyStruct_MapIntInts.DefUint32), byte(elemValRecvMyStruct_MapIntInts.DefUint32>>8), byte(elemValRecvMyStruct_MapIntInts.DefUint32>>16), byte(elemValRecvMyStruct_MapIntInts.DefUint32>>24))
			buf = append(buf, byte(elemValRecvMyStruct_MapIntInts.DefUint64), byte(elemValRecvMyStruct_MapIntInts.DefUint64>>8), byte(elemValRecvMyStruct_MapIntInts.DefUint64>>16), byte(elemValRecvMyStruct_MapIntInts.DefUint64>>24), byte(elemValRecvMyStruct_MapIntInts.DefUint64>>32), byte(elemValRecvMyStruct_MapIntInts.DefUint64>>40), byte(elemValRecvMyStruct_MapIntInts.DefUint64>>48), byte(elemValRecvMyStruct_MapIntInts.DefUint64>>56))
			if elemValRecvMyStruct_MapIntInts.Clipped > 65535 {
				return nil, fmt.Errorf("MarshalIProto: ElemValRecvMyStruct_MapIntInts.Clipped: %w: %d > %d", iproto.ErrOverflow, elemValRecvMyStruct_MapIntInts.Clipped, 65535)
			}
			buf = append(buf, byte(elemValRecvMyStruct_MapIntInts.Clipped), byte(elemValRecvMyStruct_MapIntInts.Clipped>>8))
		}
	}
	buf = iproto.EncodeBER(buf, uint64(len(recvMyStruct.MapMapSlice)))
	for keyRecvMyStruct_MapMapSlice, valRecvMyStruct_MapMapSlice := range recvMyStruct.MapMapSlice {
		if len(keyRecvMyStruct_MapMapSlice) > 255 {
			return nil, fmt.Errorf("MarshalIProto: Len(keyRecvMyStruct_MapMapSlice): %w: %d > %d", iproto.ErrOverflow, len(keyRecvMyStruct_MapMapSlice), 255)
		}
		buf = append(buf, byte(len(keyRecvMyStruct_MapMapSlice)))
		buf = append(buf, keyRecvMyStruct_MapMapSlice...)
		buf = iproto.EncodeBER(buf, uint64(len(valRecvMyStruct_MapMapSlice)))
		for keyValRecvMyStruct_MapMapSlice, valValRecvMyStruct_MapMapSlice := range valRecvMyStruct_MapMapSlice {
			if len(keyValRecvMyStruct_MapMapSlice) > 255 {
				return nil, fmt.Errorf("MarshalIProto: Len(keyValRecvMyStruct_MapMapSlice): %w: %d > %d", iproto.ErrOverflow, len(keyValRecvMyStruct_MapMapSlice), 255)
			}
			buf = append(buf, byte(len(keyValRecvMyStruct_MapMapSlice)))
			buf = append(buf, keyValRecvMyStruct_MapMapSlice...)
			buf = iproto.EncodeBER(buf, uint64(len(valValRecvMyStruct_MapMapSlice)))
			for _, elemValValRecvMyStruct_MapMapSlice := range valValRecvMyStruct_MapMapSlice {
				if len(elemValValRecvMyStruct_MapMapSlice) > 255 {
					return nil, fmt.Errorf("MarshalIProto: Len(elemValValRecvMyStruct_MapMapSlice): %w: %d > %d", iproto.ErrOverflow, len(elemValValRecvMyStruct_MapMapSlice), 255)
				}
				buf = append(buf, byte(len(elemValValRecvMyStruct_MapMapSlice)))
				buf = append(buf, elemValValRecvMyStruct_MapMapSlice...)
			}
		}
	}
	buf = iproto.EncodeBER(buf, uint64(len(recvMyStruct.MapSliceMap)))
	for keyRecvMyStruct_MapSliceMap, valRecvMyStruct_MapSliceMap := range recvMyStruct.MapSliceMap {
		if len(keyRecvMyStruct_MapSliceMap) > 255 {
			return nil, fmt.Errorf("MarshalIProto: Len(keyRecvMyStruct_MapSliceMap): %w: %d > %d", iproto.ErrOverflow, len(keyRecvMyStruct_MapSliceMap), 255)
		}
		buf = append(buf, byte(len(keyRecvMyStruct_MapSliceMap)))
		buf = append(buf, keyRecvMyStruct_MapSliceMap...)
		buf = iproto.EncodeBER(buf, uint64(len(valRecvMyStruct_MapSliceMap)))
		for _, elemValRecvMyStruct_MapSliceMap := range valRecvMyStruct_MapSliceMap {
			buf = iproto.EncodeBER(buf, uint64(len(elemValRecvMyStruct_MapSliceMap)))
			for keyElemValRecvMyStruct_MapSliceMap, valElemValRecvMyStruct_MapSliceMap := range elemValRecvMyStruct_MapSliceMap {
				if len(keyElemValRecvMyStruct_MapSliceMap) > 255 {
					return nil, fmt.Errorf("MarshalIProto: Len(keyElemValRecvMyStruct_MapSliceMap): %w: %d > %d", iproto.ErrOverflow, len(keyElemValRecvMyStruct_MapSliceMap), 255)
				}
				buf = append(buf, byte(len(keyElemValRecvMyStruct_MapSliceMap)))
				buf = append(buf, keyElemValRecvMyStruct_MapSliceMap...)
				if len(valElemValRecvMyStruct_MapSliceMap) > 255 {
					return nil, fmt.Errorf("MarshalIProto: Len(valElemValRecvMyStruct_MapSliceMap): %w: %d > %d", iproto.ErrOverflow, len(valElemValRecvMyStruct_MapSliceMap), 255)
				}
				buf = append(buf, byte(len(valElemValRecvMyStruct_MapSliceMap)))
				buf = append(buf, valElemValRecvMyStruct_MapSliceMap...)
			}
		}
	}
	return buf, nil
}
func (recv_MyStruct *MyStruct) UnmarshalIProto(buf []byte) ([]byte, error) {
	var (
		u64 uint64
		err error
	)
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	recv_MyStruct.Embedded.EmbeddedInt = int(u64)
	if len(buf) < 4 {
		return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_Embedded_EmbeddedString: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
	}
	lenRecv_MyStruct_Embedded_EmbeddedString := int(binary.LittleEndian.Uint32(buf))
	buf = buf[4:]
	if len(buf) < lenRecv_MyStruct_Embedded_EmbeddedString {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Embedded.EmbeddedString: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_Embedded_EmbeddedString)
	}
	recv_MyStruct.Embedded.EmbeddedString = string(buf[:lenRecv_MyStruct_Embedded_EmbeddedString])
	buf = buf[lenRecv_MyStruct_Embedded_EmbeddedString:]
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	recv_MyStruct.Ints.IntField = MyInt(u64)
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	recv_MyStruct.Ints.InnerInt = innerpkg.InnerInt(u64)
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.Int8: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	recv_MyStruct.Ints.Int8 = int8(buf[0])
	buf = buf[1:]
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.DefInt8: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	recv_MyStruct.Ints.DefInt8 = iprototypes.Int8(buf[0])
	buf = buf[1:]
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.Uint8: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	recv_MyStruct.Ints.Uint8 = buf[0]
	buf = buf[1:]
	if len(buf) < 2 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.Uint16: %w: %d < %d", iproto.ErrOverflow, len(buf), 2)
	}
	recv_MyStruct.Ints.Uint16 = binary.LittleEndian.Uint16(buf)
	buf = buf[2:]
	if len(buf) < 4 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.Uint32: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
	}
	recv_MyStruct.Ints.Uint32 = binary.LittleEndian.Uint32(buf)
	buf = buf[4:]
	if len(buf) < 8 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.Uint64: %w: %d < %d", iproto.ErrOverflow, len(buf), 8)
	}
	recv_MyStruct.Ints.Uint64 = binary.LittleEndian.Uint64(buf)
	buf = buf[8:]
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.DefUint8: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	recv_MyStruct.Ints.DefUint8 = iprototypes.Uint8(buf[0])
	buf = buf[1:]
	if len(buf) < 2 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.DefUint16: %w: %d < %d", iproto.ErrOverflow, len(buf), 2)
	}
	recv_MyStruct.Ints.DefUint16 = iprototypes.Uint16(binary.LittleEndian.Uint16(buf))
	buf = buf[2:]
	if len(buf) < 4 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.DefUint32: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
	}
	recv_MyStruct.Ints.DefUint32 = iprototypes.Uint32(binary.LittleEndian.Uint32(buf))
	buf = buf[4:]
	if len(buf) < 8 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.DefUint64: %w: %d < %d", iproto.ErrOverflow, len(buf), 8)
	}
	recv_MyStruct.Ints.DefUint64 = iprototypes.Uint64(binary.LittleEndian.Uint64(buf))
	buf = buf[8:]
	if len(buf) < 2 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Ints.Clipped: %w: %d < %d", iproto.ErrOverflow, len(buf), 2)
	}
	recv_MyStruct.Ints.Clipped = uint32(binary.LittleEndian.Uint16(buf))
	buf = buf[2:]
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	lenRecv_MyStruct_String := int(u64)
	if len(buf) < lenRecv_MyStruct_String {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.String: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_String)
	}
	recv_MyStruct.String = string(buf[:lenRecv_MyStruct_String])
	buf = buf[lenRecv_MyStruct_String:]
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_DefString: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	lenRecv_MyStruct_DefString := int(buf[0])
	buf = buf[1:]
	if len(buf) < lenRecv_MyStruct_DefString {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.DefString: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_DefString)
	}
	recv_MyStruct.DefString = iprototypes.String(buf[:lenRecv_MyStruct_DefString])
	buf = buf[lenRecv_MyStruct_DefString:]
	if len(buf) < 4 {
		return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_DflString: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
	}
	lenRecv_MyStruct_DflString := int(binary.LittleEndian.Uint32(buf))
	buf = buf[4:]
	if len(buf) < lenRecv_MyStruct_DflString {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.DflString: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_DflString)
	}
	recv_MyStruct.DflString = string(buf[:lenRecv_MyStruct_DflString])
	buf = buf[lenRecv_MyStruct_DflString:]
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_SignedLenString: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	lenRecv_MyStruct_SignedLenString := int(int8(buf[0]))
	buf = buf[1:]
	if len(buf) < lenRecv_MyStruct_SignedLenString {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.SignedLenString: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_SignedLenString)
	}
	recv_MyStruct.SignedLenString = string(buf[:lenRecv_MyStruct_SignedLenString])
	buf = buf[lenRecv_MyStruct_SignedLenString:]
	if len(buf) < 2 {
		return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_StrSlice: %w: %d < %d", iproto.ErrOverflow, len(buf), 2)
	}
	lenRecv_MyStruct_StrSlice := int(binary.LittleEndian.Uint16(buf))
	buf = buf[2:]
	if len(buf) < lenRecv_MyStruct_StrSlice {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.StrSlice: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_StrSlice)
	}
	recv_MyStruct.StrSlice = make([]string, lenRecv_MyStruct_StrSlice)
	for iRecv_MyStruct_StrSlice := 0; iRecv_MyStruct_StrSlice < lenRecv_MyStruct_StrSlice; iRecv_MyStruct_StrSlice++ {
		if len(buf) < 4 {
			return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_StrSlice_iRecv_MyStruct_StrSlice_: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
		}
		lenRecv_MyStruct_StrSlice_iRecv_MyStruct_StrSlice_ := int(binary.LittleEndian.Uint32(buf))
		buf = buf[4:]
		if len(buf) < lenRecv_MyStruct_StrSlice_iRecv_MyStruct_StrSlice_ {
			return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.StrSlice[iRecv_MyStruct_StrSlice]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_StrSlice_iRecv_MyStruct_StrSlice_)
		}
		recv_MyStruct.StrSlice[iRecv_MyStruct_StrSlice] = string(buf[:lenRecv_MyStruct_StrSlice_iRecv_MyStruct_StrSlice_])
		buf = buf[lenRecv_MyStruct_StrSlice_iRecv_MyStruct_StrSlice_:]
	}
	if len(buf) < 8 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Timestamp: %w: %d < %d", iproto.ErrOverflow, len(buf), 8)
	}
	recv_MyStruct.Timestamp = UnixTime(binary.LittleEndian.Uint64(buf))
	buf = buf[8:]
	if len(buf) < 4 {
		return nil, fmt.Errorf("UnmarshalIProto: BitsRecv_MyStruct_Float: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
	}
	bitsRecv_MyStruct_Float := binary.LittleEndian.Uint32(buf)
	buf = buf[4:]
	recv_MyStruct.Float = math.Float32frombits(bitsRecv_MyStruct_Float)
	if len(buf) < 4 {
		return nil, fmt.Errorf("UnmarshalIProto: BitsRecv_MyStruct_DefFloat: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
	}
	bitsRecv_MyStruct_DefFloat := binary.LittleEndian.Uint32(buf)
	buf = buf[4:]
	recv_MyStruct.DefFloat = iprototypes.Float32(math.Float32frombits(bitsRecv_MyStruct_DefFloat))
	if len(buf) < 8 {
		return nil, fmt.Errorf("UnmarshalIProto: BitsRecv_MyStruct_Double: %w: %d < %d", iproto.ErrOverflow, len(buf), 8)
	}
	bitsRecv_MyStruct_Double := binary.LittleEndian.Uint64(buf)
	buf = buf[8:]
	recv_MyStruct.Double = math.Float64frombits(bitsRecv_MyStruct_Double)
	if len(buf) < 8 {
		return nil, fmt.Errorf("UnmarshalIProto: BitsRecv_MyStruct_DefDouble: %w: %d < %d", iproto.ErrOverflow, len(buf), 8)
	}
	bitsRecv_MyStruct_DefDouble := binary.LittleEndian.Uint64(buf)
	buf = buf[8:]
	recv_MyStruct.DefDouble = iprototypes.Float64(math.Float64frombits(bitsRecv_MyStruct_DefDouble))
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	lenRecv_MyStruct_NestedSlice := int(u64)
	if len(buf) < lenRecv_MyStruct_NestedSlice {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.NestedSlice: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_NestedSlice)
	}
	recv_MyStruct.NestedSlice = make([][]string, lenRecv_MyStruct_NestedSlice)
	for iRecv_MyStruct_NestedSlice := 0; iRecv_MyStruct_NestedSlice < lenRecv_MyStruct_NestedSlice; iRecv_MyStruct_NestedSlice++ {
		if len(buf) < 2 {
			return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_: %w: %d < %d", iproto.ErrOverflow, len(buf), 2)
		}
		lenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_ := int(binary.LittleEndian.Uint16(buf))
		buf = buf[2:]
		if len(buf) < lenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_ {
			return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.NestedSlice[iRecv_MyStruct_NestedSlice]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_)
		}
		recv_MyStruct.NestedSlice[iRecv_MyStruct_NestedSlice] = make([]string, lenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_)
		for iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_ := 0; iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_ < lenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_; iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_++ {
			if len(buf) < 1 {
				return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
			}
			lenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__ := int(buf[0])
			buf = buf[1:]
			if len(buf) < lenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__ {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.NestedSlice[iRecv_MyStruct_NestedSlice][iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__)
			}
			recv_MyStruct.NestedSlice[iRecv_MyStruct_NestedSlice][iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice_] = string(buf[:lenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__])
			buf = buf[lenRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__iRecv_MyStruct_NestedSlice_iRecv_MyStruct_NestedSlice__:]
		}
	}
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	lenRecv_MyStruct_Bytes := int(u64)
	if len(buf) < lenRecv_MyStruct_Bytes {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Bytes: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_Bytes)
	}
	recv_MyStruct.Bytes = append([]byte{}, buf[:lenRecv_MyStruct_Bytes]...)
	buf = buf[lenRecv_MyStruct_Bytes:]
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	lenRecv_MyStruct_DefBytes := int(u64)
	if len(buf) < lenRecv_MyStruct_DefBytes {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.DefBytes: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_DefBytes)
	}
	recv_MyStruct.DefBytes = iprototypes.Bytes(append([]byte{}, buf[:lenRecv_MyStruct_DefBytes]...))
	buf = buf[lenRecv_MyStruct_DefBytes:]
	recv_MyStruct.BER, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	recv_MyStruct.DefBER = iprototypes.BER(u64)
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.PlainBoolT: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	recv_MyStruct.PlainBoolT = buf[0] != 0
	buf = buf[1:]
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.PlainBoolF: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	recv_MyStruct.PlainBoolF = buf[0] != 0
	buf = buf[1:]
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.CustomBoolT: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	recv_MyStruct.CustomBoolT = buf[0] != 48
	buf = buf[1:]
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.CustomBoolF: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	recv_MyStruct.CustomBoolF = buf[0] != 48
	buf = buf[1:]
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.CustomCharBoolT: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	recv_MyStruct.CustomCharBoolT = buf[0] != 102
	buf = buf[1:]
	if len(buf) < 1 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.CustomCharBoolF: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
	}
	recv_MyStruct.CustomCharBoolF = buf[0] != 102
	buf = buf[1:]
	if len(buf) < 4 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.IntArray: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
	}
	for iRecv_MyStruct_IntArray := 0; iRecv_MyStruct_IntArray < 4; iRecv_MyStruct_IntArray++ {
		if len(buf) < 4 {
			return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.IntArray[iRecv_MyStruct_IntArray]: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
		}
		recv_MyStruct.IntArray[iRecv_MyStruct_IntArray] = int(int32(binary.LittleEndian.Uint32(buf)))
		buf = buf[4:]
	}
	if len(buf) < 16 {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.UUID: %w: %d < %d", iproto.ErrOverflow, len(buf), 16)
	}
	recv_MyStruct.UUID = UUID(buf[:16])
	buf = buf[16:]
	if len(buf) < 4 {
		return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_MapStringString: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
	}
	lenRecv_MyStruct_MapStringString := int(binary.LittleEndian.Uint32(buf))
	buf = buf[4:]
	if len(buf) < lenRecv_MyStruct_MapStringString {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapStringString: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapStringString)
	}
	recv_MyStruct.MapStringString = make(map[string]string, lenRecv_MyStruct_MapStringString)
	for iRecv_MyStruct_MapStringString := 0; iRecv_MyStruct_MapStringString < lenRecv_MyStruct_MapStringString; iRecv_MyStruct_MapStringString++ {
		if len(buf) < 4 {
			return nil, fmt.Errorf("UnmarshalIProto: LenKeyRecv_MyStruct_MapStringString: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
		}
		lenKeyRecv_MyStruct_MapStringString := int(binary.LittleEndian.Uint32(buf))
		buf = buf[4:]
		if len(buf) < lenKeyRecv_MyStruct_MapStringString {
			return nil, fmt.Errorf("UnmarshalIProto: KeyRecv_MyStruct_MapStringString: %w: %d < %d", iproto.ErrOverflow, len(buf), lenKeyRecv_MyStruct_MapStringString)
		}
		keyRecv_MyStruct_MapStringString := string(buf[:lenKeyRecv_MyStruct_MapStringString])
		buf = buf[lenKeyRecv_MyStruct_MapStringString:]
		if len(buf) < 4 {
			return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_MapStringString_keyRecv_MyStruct_MapStringString_: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
		}
		lenRecv_MyStruct_MapStringString_keyRecv_MyStruct_MapStringString_ := int(binary.LittleEndian.Uint32(buf))
		buf = buf[4:]
		if len(buf) < lenRecv_MyStruct_MapStringString_keyRecv_MyStruct_MapStringString_ {
			return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapStringString[keyRecv_MyStruct_MapStringString]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapStringString_keyRecv_MyStruct_MapStringString_)
		}
		recv_MyStruct.MapStringString[keyRecv_MyStruct_MapStringString] = string(buf[:lenRecv_MyStruct_MapStringString_keyRecv_MyStruct_MapStringString_])
		buf = buf[lenRecv_MyStruct_MapStringString_keyRecv_MyStruct_MapStringString_:]
	}
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	lenRecv_MyStruct_MapStringStringTagged := int(u64)
	if len(buf) < lenRecv_MyStruct_MapStringStringTagged {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapStringStringTagged: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapStringStringTagged)
	}
	recv_MyStruct.MapStringStringTagged = make(map[string]string, lenRecv_MyStruct_MapStringStringTagged)
	for iRecv_MyStruct_MapStringStringTagged := 0; iRecv_MyStruct_MapStringStringTagged < lenRecv_MyStruct_MapStringStringTagged; iRecv_MyStruct_MapStringStringTagged++ {
		if len(buf) < 1 {
			return nil, fmt.Errorf("UnmarshalIProto: LenKeyRecv_MyStruct_MapStringStringTagged: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
		}
		lenKeyRecv_MyStruct_MapStringStringTagged := int(buf[0])
		buf = buf[1:]
		if len(buf) < lenKeyRecv_MyStruct_MapStringStringTagged {
			return nil, fmt.Errorf("UnmarshalIProto: KeyRecv_MyStruct_MapStringStringTagged: %w: %d < %d", iproto.ErrOverflow, len(buf), lenKeyRecv_MyStruct_MapStringStringTagged)
		}
		keyRecv_MyStruct_MapStringStringTagged := string(buf[:lenKeyRecv_MyStruct_MapStringStringTagged])
		buf = buf[lenKeyRecv_MyStruct_MapStringStringTagged:]
		if len(buf) < 2 {
			return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_MapStringStringTagged_keyRecv_MyStruct_MapStringStringTagged_: %w: %d < %d", iproto.ErrOverflow, len(buf), 2)
		}
		lenRecv_MyStruct_MapStringStringTagged_keyRecv_MyStruct_MapStringStringTagged_ := int(binary.LittleEndian.Uint16(buf))
		buf = buf[2:]
		if len(buf) < lenRecv_MyStruct_MapStringStringTagged_keyRecv_MyStruct_MapStringStringTagged_ {
			return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapStringStringTagged[keyRecv_MyStruct_MapStringStringTagged]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapStringStringTagged_keyRecv_MyStruct_MapStringStringTagged_)
		}
		recv_MyStruct.MapStringStringTagged[keyRecv_MyStruct_MapStringStringTagged] = string(buf[:lenRecv_MyStruct_MapStringStringTagged_keyRecv_MyStruct_MapStringStringTagged_])
		buf = buf[lenRecv_MyStruct_MapStringStringTagged_keyRecv_MyStruct_MapStringStringTagged_:]
	}
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	lenRecv_MyStruct_Set := int(u64)
	if len(buf) < lenRecv_MyStruct_Set {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.Set: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_Set)
	}
	recv_MyStruct.Set = make(map[string]struct{}, lenRecv_MyStruct_Set)
	for iRecv_MyStruct_Set := 0; iRecv_MyStruct_Set < lenRecv_MyStruct_Set; iRecv_MyStruct_Set++ {
		u64, buf, err = iproto.DecodeBER(buf)
		if err != nil {
			return nil, err
		}
		lenKeyRecv_MyStruct_Set := int(u64)
		if len(buf) < lenKeyRecv_MyStruct_Set {
			return nil, fmt.Errorf("UnmarshalIProto: KeyRecv_MyStruct_Set: %w: %d < %d", iproto.ErrOverflow, len(buf), lenKeyRecv_MyStruct_Set)
		}
		keyRecv_MyStruct_Set := string(buf[:lenKeyRecv_MyStruct_Set])
		buf = buf[lenKeyRecv_MyStruct_Set:]
		recv_MyStruct.Set[keyRecv_MyStruct_Set] = struct{}{}
	}
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	lenRecv_MyStruct_MapIntInts := int(u64)
	if len(buf) < lenRecv_MyStruct_MapIntInts {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapIntInts)
	}
	recv_MyStruct.MapIntInts = make(map[int][]Ints, lenRecv_MyStruct_MapIntInts)
	for iRecv_MyStruct_MapIntInts := 0; iRecv_MyStruct_MapIntInts < lenRecv_MyStruct_MapIntInts; iRecv_MyStruct_MapIntInts++ {
		if len(buf) < 4 {
			return nil, fmt.Errorf("UnmarshalIProto: KeyRecv_MyStruct_MapIntInts: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
		}
		keyRecv_MyStruct_MapIntInts := int(int32(binary.LittleEndian.Uint32(buf)))
		buf = buf[4:]
		if len(buf) < 1 {
			return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
		}
		lenRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_ := int(buf[0])
		buf = buf[1:]
		if len(buf) < lenRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_ {
			return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_)
		}
		recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts] = make([]Ints, lenRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_)
		for iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_ := 0; iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_ < lenRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_; iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_++ {
			u64, buf, err = iproto.DecodeBER(buf)
			if err != nil {
				return nil, err
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].IntField = MyInt(u64)
			u64, buf, err = iproto.DecodeBER(buf)
			if err != nil {
				return nil, err
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].InnerInt = innerpkg.InnerInt(u64)
			if len(buf) < 1 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Int8: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Int8 = int8(buf[0])
			buf = buf[1:]
			if len(buf) < 1 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].DefInt8: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].DefInt8 = iprototypes.Int8(buf[0])
			buf = buf[1:]
			if len(buf) < 1 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Uint8: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Uint8 = buf[0]
			buf = buf[1:]
			if len(buf) < 2 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Uint16: %w: %d < %d", iproto.ErrOverflow, len(buf), 2)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Uint16 = binary.LittleEndian.Uint16(buf)
			buf = buf[2:]
			if len(buf) < 4 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Uint32: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Uint32 = binary.LittleEndian.Uint32(buf)
			buf = buf[4:]
			if len(buf) < 8 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Uint64: %w: %d < %d", iproto.ErrOverflow, len(buf), 8)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Uint64 = binary.LittleEndian.Uint64(buf)
			buf = buf[8:]
			if len(buf) < 1 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].DefUint8: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].DefUint8 = iprototypes.Uint8(buf[0])
			buf = buf[1:]
			if len(buf) < 2 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].DefUint16: %w: %d < %d", iproto.ErrOverflow, len(buf), 2)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].DefUint16 = iprototypes.Uint16(binary.LittleEndian.Uint16(buf))
			buf = buf[2:]
			if len(buf) < 4 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].DefUint32: %w: %d < %d", iproto.ErrOverflow, len(buf), 4)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].DefUint32 = iprototypes.Uint32(binary.LittleEndian.Uint32(buf))
			buf = buf[4:]
			if len(buf) < 8 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].DefUint64: %w: %d < %d", iproto.ErrOverflow, len(buf), 8)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].DefUint64 = iprototypes.Uint64(binary.LittleEndian.Uint64(buf))
			buf = buf[8:]
			if len(buf) < 2 {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Clipped: %w: %d < %d", iproto.ErrOverflow, len(buf), 2)
			}
			recv_MyStruct.MapIntInts[keyRecv_MyStruct_MapIntInts][iRecv_MyStruct_MapIntInts_keyRecv_MyStruct_MapIntInts_].Clipped = uint32(binary.LittleEndian.Uint16(buf))
			buf = buf[2:]
		}
	}
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	lenRecv_MyStruct_MapMapSlice := int(u64)
	if len(buf) < lenRecv_MyStruct_MapMapSlice {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapMapSlice: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapMapSlice)
	}
	recv_MyStruct.MapMapSlice = make(map[string]map[string][]string, lenRecv_MyStruct_MapMapSlice)
	for iRecv_MyStruct_MapMapSlice := 0; iRecv_MyStruct_MapMapSlice < lenRecv_MyStruct_MapMapSlice; iRecv_MyStruct_MapMapSlice++ {
		if len(buf) < 1 {
			return nil, fmt.Errorf("UnmarshalIProto: LenKeyRecv_MyStruct_MapMapSlice: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
		}
		lenKeyRecv_MyStruct_MapMapSlice := int(buf[0])
		buf = buf[1:]
		if len(buf) < lenKeyRecv_MyStruct_MapMapSlice {
			return nil, fmt.Errorf("UnmarshalIProto: KeyRecv_MyStruct_MapMapSlice: %w: %d < %d", iproto.ErrOverflow, len(buf), lenKeyRecv_MyStruct_MapMapSlice)
		}
		keyRecv_MyStruct_MapMapSlice := string(buf[:lenKeyRecv_MyStruct_MapMapSlice])
		buf = buf[lenKeyRecv_MyStruct_MapMapSlice:]
		u64, buf, err = iproto.DecodeBER(buf)
		if err != nil {
			return nil, err
		}
		lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_ := int(u64)
		if len(buf) < lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_ {
			return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapMapSlice[keyRecv_MyStruct_MapMapSlice]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_)
		}
		recv_MyStruct.MapMapSlice[keyRecv_MyStruct_MapMapSlice] = make(map[string][]string, lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_)
		for iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_ := 0; iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_ < lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_; iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_++ {
			if len(buf) < 1 {
				return nil, fmt.Errorf("UnmarshalIProto: LenKeyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
			}
			lenKeyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_ := int(buf[0])
			buf = buf[1:]
			if len(buf) < lenKeyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_ {
				return nil, fmt.Errorf("UnmarshalIProto: KeyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_: %w: %d < %d", iproto.ErrOverflow, len(buf), lenKeyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_)
			}
			keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_ := string(buf[:lenKeyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_])
			buf = buf[lenKeyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_:]
			u64, buf, err = iproto.DecodeBER(buf)
			if err != nil {
				return nil, err
			}
			lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__ := int(u64)
			if len(buf) < lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__ {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapMapSlice[keyRecv_MyStruct_MapMapSlice][keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__)
			}
			recv_MyStruct.MapMapSlice[keyRecv_MyStruct_MapMapSlice][keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_] = make([]string, lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__)
			for iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__ := 0; iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__ < lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__; iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__++ {
				if len(buf) < 1 {
					return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
				}
				lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___ := int(buf[0])
				buf = buf[1:]
				if len(buf) < lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___ {
					return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapMapSlice[keyRecv_MyStruct_MapMapSlice][keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_][iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___)
				}
				recv_MyStruct.MapMapSlice[keyRecv_MyStruct_MapMapSlice][keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice_][iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__] = string(buf[:lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___])
				buf = buf[lenRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___iRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice__keyRecv_MyStruct_MapMapSlice_keyRecv_MyStruct_MapMapSlice___:]
			}
		}
	}
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	lenRecv_MyStruct_MapSliceMap := int(u64)
	if len(buf) < lenRecv_MyStruct_MapSliceMap {
		return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapSliceMap: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapSliceMap)
	}
	recv_MyStruct.MapSliceMap = make(map[string][]map[string]string, lenRecv_MyStruct_MapSliceMap)
	for iRecv_MyStruct_MapSliceMap := 0; iRecv_MyStruct_MapSliceMap < lenRecv_MyStruct_MapSliceMap; iRecv_MyStruct_MapSliceMap++ {
		if len(buf) < 1 {
			return nil, fmt.Errorf("UnmarshalIProto: LenKeyRecv_MyStruct_MapSliceMap: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
		}
		lenKeyRecv_MyStruct_MapSliceMap := int(buf[0])
		buf = buf[1:]
		if len(buf) < lenKeyRecv_MyStruct_MapSliceMap {
			return nil, fmt.Errorf("UnmarshalIProto: KeyRecv_MyStruct_MapSliceMap: %w: %d < %d", iproto.ErrOverflow, len(buf), lenKeyRecv_MyStruct_MapSliceMap)
		}
		keyRecv_MyStruct_MapSliceMap := string(buf[:lenKeyRecv_MyStruct_MapSliceMap])
		buf = buf[lenKeyRecv_MyStruct_MapSliceMap:]
		u64, buf, err = iproto.DecodeBER(buf)
		if err != nil {
			return nil, err
		}
		lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_ := int(u64)
		if len(buf) < lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_ {
			return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapSliceMap[keyRecv_MyStruct_MapSliceMap]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_)
		}
		recv_MyStruct.MapSliceMap[keyRecv_MyStruct_MapSliceMap] = make([]map[string]string, lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_)
		for iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_ := 0; iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_ < lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_; iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_++ {
			u64, buf, err = iproto.DecodeBER(buf)
			if err != nil {
				return nil, err
			}
			lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__ := int(u64)
			if len(buf) < lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__ {
				return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapSliceMap[keyRecv_MyStruct_MapSliceMap][iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__)
			}
			recv_MyStruct.MapSliceMap[keyRecv_MyStruct_MapSliceMap][iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_] = make(map[string]string, lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__)
			for iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__ := 0; iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__ < lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__; iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__++ {
				if len(buf) < 1 {
					return nil, fmt.Errorf("UnmarshalIProto: LenKeyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
				}
				lenKeyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__ := int(buf[0])
				buf = buf[1:]
				if len(buf) < lenKeyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__ {
					return nil, fmt.Errorf("UnmarshalIProto: KeyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__: %w: %d < %d", iproto.ErrOverflow, len(buf), lenKeyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__)
				}
				keyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__ := string(buf[:lenKeyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__])
				buf = buf[lenKeyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__:]
				if len(buf) < 1 {
					return nil, fmt.Errorf("UnmarshalIProto: LenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___keyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___: %w: %d < %d", iproto.ErrOverflow, len(buf), 1)
				}
				lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___keyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___ := int(buf[0])
				buf = buf[1:]
				if len(buf) < lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___keyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___ {
					return nil, fmt.Errorf("UnmarshalIProto: Recv_MyStruct.MapSliceMap[keyRecv_MyStruct_MapSliceMap][iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_][keyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__]: %w: %d < %d", iproto.ErrOverflow, len(buf), lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___keyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___)
				}
				recv_MyStruct.MapSliceMap[keyRecv_MyStruct_MapSliceMap][iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap_][keyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__] = string(buf[:lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___keyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___])
				buf = buf[lenRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___keyRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap__iRecv_MyStruct_MapSliceMap_keyRecv_MyStruct_MapSliceMap___:]
			}
		}
	}
	return buf, nil
}
func (recvUUID UUID) MarshalIProto(buf []byte) ([]byte, error) {
	for _, elemRecvUUID := range recvUUID {
		buf = iproto.EncodeBER(buf, uint64(elemRecvUUID))
	}
	return buf, nil
}
func (recv_UUID *UUID) UnmarshalIProto(buf []byte) ([]byte, error) {
	var (
		u64 uint64
		err error
	)
	if len(buf) < 16 {
		return nil, fmt.Errorf("UnmarshalIProto: *recv_UUID: %w: %d < %d", iproto.ErrOverflow, len(buf), 16)
	}
	for i_recv_UUID := 0; i_recv_UUID < 16; i_recv_UUID++ {
		u64, buf, err = iproto.DecodeBER(buf)
		if err != nil {
			return nil, err
		}
		(*recv_UUID)[i_recv_UUID] = byte(u64)
	}
	return buf, nil
}
func (recvUnixTime UnixTime) MarshalIProto(buf []byte) ([]byte, error) {
	buf = iproto.EncodeBER(buf, uint64(recvUnixTime))
	return buf, nil
}
func (recv_UnixTime *UnixTime) UnmarshalIProto(buf []byte) ([]byte, error) {
	var (
		u64 uint64
		err error
	)
	u64, buf, err = iproto.DecodeBER(buf)
	if err != nil {
		return nil, err
	}
	*recv_UnixTime = UnixTime(u64)
	return buf, nil
}
